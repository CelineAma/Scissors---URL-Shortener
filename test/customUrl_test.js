//Tests that a unique custom URL is generated when the input custom URL does not exist in the database
    
    it("test_unique_custom_url: generates a unique custom URL when the input custom URL does not exist in the database", async () => {
        const customUrl = "testCustomUrl";
        const result = await generateUniqueCustomUrl(customUrl);
        expect(result).toBe(customUrl);
    });

// Tests that a unique custom URL is generated by appending a suffix to the input custom URL when it already exists in the database
        it("test_custom_url_suffix: generates a unique custom URL by appending a suffix to the input custom URL when it already exists in the database", async () => {
            const existingCustomUrl = "testCustomUrl";
            const newCustomUrl = "testCustomUrl-1";
            const mockScissors = {
                findOne: jest.fn().mockReturnValueOnce(true).mockReturnValueOnce(false)
            };
            const result = await generateUniqueCustomUrl(existingCustomUrl, mockScissors);
            expect(result).toBe(newCustomUrl);
        });

 // Tests that an error is thrown when the input custom URL is empty
    it("test_empty_custom_url: throws an error when the input custom URL is empty", async () => {
        const customUrl = "";
        await expect(generateUniqueCustomUrl(customUrl)).rejects.toThrow("Custom URL cannot be empty");
    });

// Tests that an error is thrown when the input custom URL contains invalid characters or exceeds the maximum length
    it("test_invalid_custom_url: throws an error when the input custom URL contains invalid characters or exceeds the maximum length", async () => {
        const customUrl = "invalid!@#$%^&*()_+-={}[]|\\:;\"'<>,.?/~`";
        await expect(generateUniqueCustomUrl(customUrl)).rejects.toThrow("Invalid custom URL");
    });

// Tests that the function handles concurrent requests to generate a custom URL
        it("test_concurrent_custom_url: handles concurrent requests to generate a custom URL", async () => {
            const customUrl = "testCustomUrl";
            const mockScissors = {
                findOne: jest.fn().mockReturnValueOnce(true).mockReturnValueOnce(false)
            };
            const promises = [];
            for (let i = 0; i < 10; i++) {
                promises.push(generateUniqueCustomUrl(customUrl, mockScissors));
            }
            const results = await Promise.all(promises);
            expect(results).toEqual([
                "testCustomUrl-1",
                "testCustomUrl-2",
                "testCustomUrl-3",
                "testCustomUrl-4",
                "testCustomUrl-5",
                "testCustomUrl-6",
                "testCustomUrl-7",
                "testCustomUrl-8",
                "testCustomUrl-9",
                "testCustomUrl-10"
            ]);
        });